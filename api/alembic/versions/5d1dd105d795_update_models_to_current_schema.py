"""Update models to current schema

Revision ID: 5d1dd105d795
Revises: 94ef99018bb4
Create Date: 2025-07-16 23:48:20.636616

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5d1dd105d795'
down_revision = '94ef99018bb4'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('profiles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('avatar', sa.String(length=500), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('website', sa.String(length=200), nullable=True),
    sa.Column('twitter_handle', sa.String(length=50), nullable=True),
    sa.Column('github_handle', sa.String(length=50), nullable=True),
    sa.Column('linkedin_handle', sa.String(length=50), nullable=True),
    sa.Column('birth_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('post_likes',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('post_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'post_id')
    )
    op.drop_table('user_topics')
    op.drop_index(op.f('ix_access_audit_log_access_granted'), table_name='access_audit_log')
    op.drop_index(op.f('ix_access_audit_log_attempted_route'), table_name='access_audit_log')
    op.drop_index(op.f('ix_access_audit_log_created_at'), table_name='access_audit_log')
    op.drop_index(op.f('ix_access_audit_log_user_id'), table_name='access_audit_log')
    op.drop_table('access_audit_log')
    op.drop_index(op.f('ix_settings_key'), table_name='settings')
    op.drop_table('settings')
    op.drop_index(op.f('ix_user_management_logs_action'), table_name='user_management_logs')
    op.drop_index(op.f('ix_user_management_logs_admin_id'), table_name='user_management_logs')
    op.drop_index(op.f('ix_user_management_logs_created_at'), table_name='user_management_logs')
    op.drop_index(op.f('ix_user_management_logs_target_user_id'), table_name='user_management_logs')
    op.drop_table('user_management_logs')
    op.drop_index(op.f('ix_media_user_id'), table_name='media')
    op.drop_table('media')
    op.drop_index(op.f('ix_follows_followed_id'), table_name='follows')
    op.drop_index(op.f('ix_follows_follower_id'), table_name='follows')
    op.drop_table('follows')
    op.drop_index(op.f('ix_content_approvals_action'), table_name='content_approvals')
    op.drop_index(op.f('ix_content_approvals_admin_id'), table_name='content_approvals')
    op.drop_index(op.f('ix_content_approvals_content_id'), table_name='content_approvals')
    op.drop_index(op.f('ix_content_approvals_content_type'), table_name='content_approvals')
    op.drop_index(op.f('ix_content_approvals_created_at'), table_name='content_approvals')
    op.drop_table('content_approvals')
    op.drop_index(op.f('ix_bookmarks_post_id'), table_name='bookmarks')
    op.drop_index(op.f('ix_bookmarks_user_id'), table_name='bookmarks')
    op.drop_table('bookmarks')
    op.drop_index(op.f('ix_views_post_id'), table_name='views')
    op.drop_index(op.f('ix_views_user_id'), table_name='views')
    op.drop_index(op.f('ix_views_viewed_at'), table_name='views')
    op.drop_table('views')
    op.drop_table('user_preferences')
    op.drop_index(op.f('ix_likes_likeable_id'), table_name='likes')
    op.drop_index(op.f('ix_likes_likeable_type'), table_name='likes')
    op.drop_index(op.f('ix_likes_user_id'), table_name='likes')
    op.drop_table('likes')
    op.drop_table('comment_likes')
    op.drop_index(op.f('ix_system_operations_admin_id'), table_name='system_operations')
    op.drop_index(op.f('ix_system_operations_created_at'), table_name='system_operations')
    op.drop_index(op.f('ix_system_operations_operation_type'), table_name='system_operations')
    op.drop_index(op.f('ix_system_operations_status'), table_name='system_operations')
    op.drop_table('system_operations')
    op.drop_table('user_reads')
    op.alter_column('categories', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('categories', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('categories', 'slug',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('categories', 'description',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('categories', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index(op.f('ix_categories_name'), table_name='categories')
    op.drop_index(op.f('ix_categories_slug'), table_name='categories')
    op.create_unique_constraint(None, 'categories', ['slug'])
    op.create_unique_constraint(None, 'categories', ['name'])
    op.drop_column('categories', 'updated_at')
    op.add_column('comments', sa.Column('author_id', sa.Integer(), nullable=False))
    op.add_column('comments', sa.Column('is_approved', sa.Boolean(), nullable=True))
    op.alter_column('comments', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('comments', 'content',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=False)
    op.alter_column('comments', 'post_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('comments', 'parent_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('comments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index(op.f('ix_comments_created_at'), table_name='comments')
    op.drop_index(op.f('ix_comments_parent_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_post_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_status'), table_name='comments')
    op.drop_index(op.f('ix_comments_user_id'), table_name='comments')
    op.drop_constraint(op.f('comments_user_id_fkey'), 'comments', type_='foreignkey')
    op.create_foreign_key(None, 'comments', 'users', ['author_id'], ['id'])
    op.drop_column('comments', 'guest_email')
    op.drop_column('comments', 'status')
    op.drop_column('comments', 'guest_name')
    op.drop_column('comments', 'user_id')
    op.alter_column('post_tags', 'post_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('post_tags', 'tag_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.add_column('posts', sa.Column('content', sa.Text(), nullable=False))
    op.add_column('posts', sa.Column('featured_image', sa.String(length=500), nullable=True))
    op.add_column('posts', sa.Column('author_id', sa.Integer(), nullable=False))
    op.add_column('posts', sa.Column('is_published', sa.Boolean(), nullable=True))
    op.add_column('posts', sa.Column('is_featured', sa.Boolean(), nullable=True))
    op.add_column('posts', sa.Column('view_count', sa.Integer(), nullable=True))
    op.add_column('posts', sa.Column('reading_time', sa.Integer(), nullable=True))
    op.add_column('posts', sa.Column('meta_title', sa.String(length=200), nullable=True))
    op.add_column('posts', sa.Column('meta_description', sa.String(length=300), nullable=True))
    op.alter_column('posts', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('posts', 'title',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=False)
    op.alter_column('posts', 'slug',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=False)
    op.alter_column('posts', 'excerpt',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('posts', 'category_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index(op.f('ix_posts_category_id'), table_name='posts')
    op.drop_index(op.f('ix_posts_featured'), table_name='posts')
    op.drop_index(op.f('ix_posts_published_at'), table_name='posts')
    op.drop_index(op.f('ix_posts_slug'), table_name='posts')
    op.drop_index(op.f('ix_posts_status'), table_name='posts')
    op.drop_index(op.f('ix_posts_user_id'), table_name='posts')
    op.create_unique_constraint(None, 'posts', ['slug'])
    op.drop_constraint(op.f('posts_user_id_fkey'), 'posts', type_='foreignkey')
    op.create_foreign_key(None, 'posts', 'users', ['author_id'], ['id'])
    op.drop_column('posts', 'comments_enabled')
    op.drop_column('posts', 'body')
    op.drop_column('posts', 'user_id')
    op.drop_column('posts', 'feedback')
    op.drop_column('posts', 'status')
    op.drop_column('posts', 'difficulty_level')
    op.drop_column('posts', 'featured')
    op.drop_column('posts', 'generated_image_path')
    op.alter_column('tags', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('tags', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('tags', 'slug',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_index(op.f('ix_tags_slug'), table_name='tags')
    op.create_unique_constraint(None, 'tags', ['slug'])
    op.create_unique_constraint(None, 'tags', ['name'])
    op.drop_column('tags', 'updated_at')
    op.add_column('users', sa.Column('uuid', sa.String(length=36), nullable=True))
    op.add_column('users', sa.Column('username', sa.String(length=50), nullable=False))
    op.add_column('users', sa.Column('full_name', sa.String(length=255), nullable=False))
    op.add_column('users', sa.Column('password', sa.String(length=255), nullable=False))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('last_login', sa.DateTime(), nullable=True))
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_uuid'), 'users', ['uuid'], unique=True)
    op.drop_column('users', 'name')
    op.drop_column('users', 'avatar')
    op.drop_column('users', 'role')
    op.drop_column('users', 'bio')
    op.drop_column('users', 'password_hash')
    op.drop_column('users', 'email_verified_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('email_verified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('bio', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('avatar', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_users_uuid'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('users', 'last_login')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'password')
    op.drop_column('users', 'full_name')
    op.drop_column('users', 'username')
    op.drop_column('users', 'uuid')
    op.add_column('tags', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'tags', type_='unique')
    op.drop_constraint(None, 'tags', type_='unique')
    op.create_index(op.f('ix_tags_slug'), 'tags', ['slug'], unique=True)
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=True)
    op.alter_column('tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('tags', 'slug',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('tags', 'name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('tags', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.add_column('posts', sa.Column('generated_image_path', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('posts', sa.Column('featured', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('posts', sa.Column('difficulty_level', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('posts', sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('posts', sa.Column('feedback', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('posts', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('posts', sa.Column('body', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('posts', sa.Column('comments_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'posts', type_='foreignkey')
    op.create_foreign_key(op.f('posts_user_id_fkey'), 'posts', 'users', ['user_id'], ['id'])
    op.drop_constraint(None, 'posts', type_='unique')
    op.create_index(op.f('ix_posts_user_id'), 'posts', ['user_id'], unique=False)
    op.create_index(op.f('ix_posts_status'), 'posts', ['status'], unique=False)
    op.create_index(op.f('ix_posts_slug'), 'posts', ['slug'], unique=True)
    op.create_index(op.f('ix_posts_published_at'), 'posts', ['published_at'], unique=False)
    op.create_index(op.f('ix_posts_featured'), 'posts', ['featured'], unique=False)
    op.create_index(op.f('ix_posts_category_id'), 'posts', ['category_id'], unique=False)
    op.alter_column('posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('posts', 'category_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('posts', 'excerpt',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('posts', 'slug',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('posts', 'title',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('posts', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('posts', 'meta_description')
    op.drop_column('posts', 'meta_title')
    op.drop_column('posts', 'reading_time')
    op.drop_column('posts', 'view_count')
    op.drop_column('posts', 'is_featured')
    op.drop_column('posts', 'is_published')
    op.drop_column('posts', 'author_id')
    op.drop_column('posts', 'featured_image')
    op.drop_column('posts', 'content')
    op.alter_column('post_tags', 'tag_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('post_tags', 'post_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.add_column('comments', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('comments', sa.Column('guest_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('comments', sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('comments', sa.Column('guest_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.create_foreign_key(op.f('comments_user_id_fkey'), 'comments', 'users', ['user_id'], ['id'])
    op.create_index(op.f('ix_comments_user_id'), 'comments', ['user_id'], unique=False)
    op.create_index(op.f('ix_comments_status'), 'comments', ['status'], unique=False)
    op.create_index(op.f('ix_comments_post_id'), 'comments', ['post_id'], unique=False)
    op.create_index(op.f('ix_comments_parent_id'), 'comments', ['parent_id'], unique=False)
    op.create_index(op.f('ix_comments_created_at'), 'comments', ['created_at'], unique=False)
    op.alter_column('comments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('comments', 'parent_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('comments', 'post_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('comments', 'content',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('comments', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('comments', 'is_approved')
    op.drop_column('comments', 'author_id')
    op.add_column('categories', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'categories', type_='unique')
    op.drop_constraint(None, 'categories', type_='unique')
    op.create_index(op.f('ix_categories_slug'), 'categories', ['slug'], unique=True)
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=True)
    op.alter_column('categories', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('categories', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('categories', 'slug',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('categories', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('categories', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.create_table('user_reads',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('read_progress', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name=op.f('user_reads_post_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_reads_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'post_id', name=op.f('user_reads_pkey'))
    )
    op.create_table('system_operations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('operation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('admin_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('parameters', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('output', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], name=op.f('system_operations_admin_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('system_operations_pkey'))
    )
    op.create_index(op.f('ix_system_operations_status'), 'system_operations', ['status'], unique=False)
    op.create_index(op.f('ix_system_operations_operation_type'), 'system_operations', ['operation_type'], unique=False)
    op.create_index(op.f('ix_system_operations_created_at'), 'system_operations', ['created_at'], unique=False)
    op.create_index(op.f('ix_system_operations_admin_id'), 'system_operations', ['admin_id'], unique=False)
    op.create_table('comment_likes',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('comment_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['comment_id'], ['comments.id'], name=op.f('comment_likes_comment_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('comment_likes_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'comment_id', name=op.f('comment_likes_pkey'))
    )
    op.create_table('likes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('likeable_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('likeable_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('likes_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('likes_pkey')),
    sa.UniqueConstraint('user_id', 'likeable_type', 'likeable_id', name=op.f('uix_user_likeable'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_likes_user_id'), 'likes', ['user_id'], unique=False)
    op.create_index(op.f('ix_likes_likeable_type'), 'likes', ['likeable_type'], unique=False)
    op.create_index(op.f('ix_likes_likeable_id'), 'likes', ['likeable_id'], unique=False)
    op.create_table('user_preferences',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('newsletter_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('preferred_categories', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_preferences_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', name=op.f('user_preferences_pkey'))
    )
    op.create_table('views',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('viewed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name=op.f('views_post_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('views_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('views_pkey'))
    )
    op.create_index(op.f('ix_views_viewed_at'), 'views', ['viewed_at'], unique=False)
    op.create_index(op.f('ix_views_user_id'), 'views', ['user_id'], unique=False)
    op.create_index(op.f('ix_views_post_id'), 'views', ['post_id'], unique=False)
    op.create_table('bookmarks',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name=op.f('bookmarks_post_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('bookmarks_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('bookmarks_pkey')),
    sa.UniqueConstraint('user_id', 'post_id', name=op.f('uix_user_post_bookmark'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_bookmarks_user_id'), 'bookmarks', ['user_id'], unique=False)
    op.create_index(op.f('ix_bookmarks_post_id'), 'bookmarks', ['post_id'], unique=False)
    op.create_table('content_approvals',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('content_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('admin_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('feedback', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], name=op.f('content_approvals_admin_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('content_approvals_pkey'))
    )
    op.create_index(op.f('ix_content_approvals_created_at'), 'content_approvals', ['created_at'], unique=False)
    op.create_index(op.f('ix_content_approvals_content_type'), 'content_approvals', ['content_type'], unique=False)
    op.create_index(op.f('ix_content_approvals_content_id'), 'content_approvals', ['content_id'], unique=False)
    op.create_index(op.f('ix_content_approvals_admin_id'), 'content_approvals', ['admin_id'], unique=False)
    op.create_index(op.f('ix_content_approvals_action'), 'content_approvals', ['action'], unique=False)
    op.create_table('follows',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('follower_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('followed_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['followed_id'], ['users.id'], name=op.f('follows_followed_id_fkey')),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], name=op.f('follows_follower_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('follows_pkey')),
    sa.UniqueConstraint('follower_id', 'followed_id', name=op.f('uix_follower_followed'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_follows_follower_id'), 'follows', ['follower_id'], unique=False)
    op.create_index(op.f('ix_follows_followed_id'), 'follows', ['followed_id'], unique=False)
    op.create_table('media',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('original_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('disk', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('alt_text', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('media_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('media_pkey'))
    )
    op.create_index(op.f('ix_media_user_id'), 'media', ['user_id'], unique=False)
    op.create_table('user_management_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('admin_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('target_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('old_values', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('new_values', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], name=op.f('user_management_logs_admin_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_management_logs_pkey'))
    )
    op.create_index(op.f('ix_user_management_logs_target_user_id'), 'user_management_logs', ['target_user_id'], unique=False)
    op.create_index(op.f('ix_user_management_logs_created_at'), 'user_management_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_user_management_logs_admin_id'), 'user_management_logs', ['admin_id'], unique=False)
    op.create_index(op.f('ix_user_management_logs_action'), 'user_management_logs', ['action'], unique=False)
    op.create_table('settings',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('settings_pkey'))
    )
    op.create_index(op.f('ix_settings_key'), 'settings', ['key'], unique=True)
    op.create_table('access_audit_log',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('attempted_route', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('route_method', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('user_role', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('required_permission', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('access_granted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('request_headers', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('denial_reason', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('access_audit_log_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('access_audit_log_pkey'))
    )
    op.create_index(op.f('ix_access_audit_log_user_id'), 'access_audit_log', ['user_id'], unique=False)
    op.create_index(op.f('ix_access_audit_log_created_at'), 'access_audit_log', ['created_at'], unique=False)
    op.create_index(op.f('ix_access_audit_log_attempted_route'), 'access_audit_log', ['attempted_route'], unique=False)
    op.create_index(op.f('ix_access_audit_log_access_granted'), 'access_audit_log', ['access_granted'], unique=False)
    op.create_table('user_topics',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('user_topics_tag_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_topics_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'tag_id', name=op.f('user_topics_pkey'))
    )
    op.drop_table('post_likes')
    op.drop_table('profiles')
    # ### end Alembic commands ### 