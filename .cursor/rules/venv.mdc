---
alwaysApply: true
---

# Virtual Environment Usage for CraftyXhub FastAPI Project

## Always Use @venv for Running and Installing

This document outlines the proper usage of the virtual environment for the CraftyXhub FastAPI project. **Always use the virtual environment when running commands or installing dependencies.**

## 1. Virtual Environment Setup

### Initial Setup (if not already done)
```bash
# Create virtual environment
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate
```

### Verify Virtual Environment is Active
```bash
# Check if virtual environment is active (should show (venv) in prompt)
which python  # Should point to venv/Scripts/python or venv/bin/python
```

## 2. Installing Dependencies

### Install from requirements.txt
```bash
# ALWAYS activate venv first
venv\Scripts\activate  # Windows
# or
source venv/bin/activate  # macOS/Linux

# Install dependencies
pip install -r requirements.txt
```

### Install Individual Packages
```bash
# ALWAYS use venv when installing
pip install package-name
```

## 3. Running the FastAPI Application

### Development Server
```bash
# ALWAYS activate venv first
venv\Scripts\activate

# Run with uvicorn
uvicorn main:app --reload

# Or run with FastAPI CLI (if available)
fastapi dev main.py
```

### Production Server
```bash
# ALWAYS activate venv first
venv\Scripts\activate

# Run with uvicorn for production
uvicorn main:app --host 0.0.0.0 --port 8000
```

## 4. Running Tests

```bash
# ALWAYS activate venv first
venv\Scripts\activate

# Run tests with pytest
pytest

# Run specific test file
pytest test_file.py
```

## 5. Database Operations

```bash
# ALWAYS activate venv first
venv\Scripts\activate

# Run Alembic migrations
alembic upgrade head

# Create new migration
alembic revision --autogenerate -m "Migration message"
```

## 6. Updated Dependencies (2024)

Based on FastAPI reference documentation and codebase analysis, the following dependencies have been added/updated:

### Core Dependencies
- `fastapi==0.116.0` - Latest stable FastAPI version
- `uvicorn==0.35.0` - ASGI server
- `sqlmodel==0.0.24` - SQL database models
- `pydantic==2.11.7` - Data validation
- `pydantic-settings==2.10.1` - Configuration management

### Security Dependencies
- `python-jose[cryptography]==3.3.0` - JWT handling with cryptography
- `PyJWT==2.10.1` - JWT tokens
- `bcrypt==4.2.0` - Password hashing
- `passlib==1.7.4` - Password utilities
- `cryptography==45.0.5` - Cryptographic operations

### Database Dependencies
- `sqlalchemy==2.0.41` - SQL toolkit
- `asyncpg==0.30.0` - PostgreSQL async driver
- `alembic==1.16.3` - Database migrations

### Additional Dependencies
- `PyYAML==6.0.2` - YAML configuration support (used in config/loader.py)
- `email-validator==2.2.0` - Email validation for Pydantic
- `python-multipart==0.0.20` - Form data handling
- `python-dotenv==1.1.1` - Environment variable loading
- `redis==5.2.0` - Redis client for caching
- `typing-extensions==4.12.2` - Extended type hints

### Testing Dependencies
- `httpx==0.27.2` - HTTP client for testing
- `pytest==8.3.3` - Testing framework
- `pytest-asyncio==0.23.8` - Async testing support

## 7. Best Practices

### Always Use Virtual Environment
- Never install packages globally
- Always activate venv before any Python operations
- Use `pip list` to verify installed packages in venv

### Dependency Management
- Keep requirements.txt updated
- Use specific version numbers (not ranges)
- Test after updating dependencies

### Environment Variables
- Use `.env` files for local development
- Never commit sensitive data to version control
- Use proper environment configuration

## 8. Common Commands Reference

```bash
# Activate virtual environment
venv\Scripts\activate  # Windows
source venv/bin/activate  # macOS/Linux

# Install dependencies
pip install -r requirements.txt

# Run development server
uvicorn main:app --reload

# Run tests
pytest

# Database migration
alembic upgrade head

# Check installed packages
pip list

# Freeze current dependencies
pip freeze > requirements.txt
```

## 9. Troubleshooting

### If you get import errors:
1. Ensure virtual environment is activated
2. Verify all dependencies are installed: `pip install -r requirements.txt`
3. Check Python path: `which python`

### If server won't start:
1. Check if virtual environment is activated
2. Verify all dependencies are installed
3. Check for any missing environment variables
4. Ensure database is running (PostgreSQL)

## 10. FastAPI Reference Compliance



**Remember: Always use @venv for all operations!** # Virtual Environment Usage for CraftyXhub FastAPI Project

## Always Use @venv for Running and Installing

This document outlines the proper usage of the virtual environment for the CraftyXhub FastAPI project. **Always use the virtual environment when running commands or installing dependencies.**

## 1. Virtual Environment Setup

### Initial Setup (if not already done)
```bash
# Create virtual environment
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate
```

### Verify Virtual Environment is Active
```bash
# Check if virtual environment is active (should show (venv) in prompt)
which python  # Should point to venv/Scripts/python or venv/bin/python
```

## 2. Installing Dependencies

### Install from requirements.txt
```bash
# ALWAYS activate venv first
venv\Scripts\activate  # Windows
# or
source venv/bin/activate  # macOS/Linux

# Install dependencies
pip install -r requirements.txt
```

### Install Individual Packages
```bash
# ALWAYS use venv when installing
pip install package-name
```

## 3. Running the FastAPI Application

### Development Server
```bash
# ALWAYS activate venv first
venv\Scripts\activate

# Run with uvicorn
uvicorn main:app --reload

# Or run with FastAPI CLI (if available)
fastapi dev main.py
```

### Production Server
```bash
# ALWAYS activate venv first
venv\Scripts\activate

# Run with uvicorn for production
uvicorn main:app --host 0.0.0.0 --port 8000
```

## 4. Running Tests

```bash
# ALWAYS activate venv first
venv\Scripts\activate

# Run tests with pytest
pytest

# Run specific test file
pytest test_file.py
```

## 5. Database Operations

```bash
# ALWAYS activate venv first
venv\Scripts\activate

# Run Alembic migrations
alembic upgrade head

# Create new migration
alembic revision --autogenerate -m "Migration message"
```

## 6. Updated Dependencies (2024)

Based on FastAPI reference documentation and codebase analysis, the following dependencies have been added/updated:

### Core Dependencies
- `fastapi==0.116.0` - Latest stable FastAPI version
- `uvicorn==0.35.0` - ASGI server
- `sqlmodel==0.0.24` - SQL database models
- `pydantic==2.11.7` - Data validation
- `pydantic-settings==2.10.1` - Configuration management

### Security Dependencies
- `python-jose[cryptography]==3.3.0` - JWT handling with cryptography
- `PyJWT==2.10.1` - JWT tokens
- `bcrypt==4.2.0` - Password hashing
- `passlib==1.7.4` - Password utilities
- `cryptography==45.0.5` - Cryptographic operations

### Database Dependencies
- `sqlalchemy==2.0.41` - SQL toolkit
- `asyncpg==0.30.0` - PostgreSQL async driver
- `alembic==1.16.3` - Database migrations

### Additional Dependencies
- `PyYAML==6.0.2` - YAML configuration support (used in config/loader.py)
- `email-validator==2.2.0` - Email validation for Pydantic
- `python-multipart==0.0.20` - Form data handling
- `python-dotenv==1.1.1` - Environment variable loading
- `redis==5.2.0` - Redis client for caching
- `typing-extensions==4.12.2` - Extended type hints

### Testing Dependencies
- `httpx==0.27.2` - HTTP client for testing
- `pytest==8.3.3` - Testing framework
- `pytest-asyncio==0.23.8` - Async testing support

## 7. Best Practices

### Always Use Virtual Environment
- Never install packages globally
- Always activate venv before any Python operations
- Use `pip list` to verify installed packages in venv

### Dependency Management
- Keep requirements.txt updated
- Use specific version numbers (not ranges)
- Test after updating dependencies

### Environment Variables
- Use `.env` files for local development
- Never commit sensitive data to version control
- Use proper environment configuration

## 8. Common Commands Reference

```bash
# Activate virtual environment
venv\Scripts\activate  # Windows
source venv/bin/activate  # macOS/Linux

# Install dependencies
pip install -r requirements.txt

# Run development server
uvicorn main:app --reload

# Run tests
pytest

# Database migration
alembic upgrade head

# Check installed packages
pip list

# Freeze current dependencies
pip freeze > requirements.txt
```

## 9. Troubleshooting

### If you get import errors:
1. Ensure virtual environment is activated
2. Verify all dependencies are installed: `pip install -r requirements.txt`
3. Check Python path: `which python`

### If server won't start:
1. Check if virtual environment is activated
2. Verify all dependencies are installed
3. Check for any missing environment variables
4. Ensure database is running (PostgreSQL)

## 10. FastAPI Reference Compliance



**Remember: Always use @venv for all operations!** 